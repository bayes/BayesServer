/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InstallationEndPane.java
 *
 * Created on Jun 19, 2009, 3:54:11 PM
 */

package bayesserver;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.Toolkit;
import java.io.*;
import javax.swing.JPopupMenu;
/**
 *
 * @author apple
 */
public class InstallationEndPane extends javax.swing.JPanel  implements Constants{

    /** Creates new form InstallationEndPane */
    public InstallationEndPane() {
        initComponents();
    }
    public InstallationEndPane(String message) {
        initComponents();
        setPostInstallationInstuctions(message);
    }

    public void setPostInstallationInstuctions(String message){
         getTextPane().setText(message);

    }
     public void setHeaderMessage(String message){
        headerLabel.setText(message);

    }
    public String getEntireText(){
         return getTextPane().getText();

    }
    public String getSelectedText(){
         return getTextPane().getSelectedText();
    }
    public void putSelectedTextIntoClipboard(){
        Clipboard clipboard         =   Toolkit.getDefaultToolkit().getSystemClipboard();
        String txt              =   getSelectedText();

        clipboard.setContents(new StringSelection(txt), new TextTransfer());
    }
    public void putEntireTextIntoClipboard(){
        Clipboard clipboard     =   Toolkit.getDefaultToolkit().getSystemClipboard();
        String txt              =   getEntireText();
        clipboard.setContents(new StringSelection(txt), new TextTransfer());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        copySelectedTextMenuItem = new javax.swing.JMenuItem();
        copyAllTextMenuItem = new javax.swing.JMenuItem();
        centerPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new AntiAliasedTextPane();
        headerLabel = new javax.swing.JLabel();
        bottomPane = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        copyCodeButton = new javax.swing.JButton();

        copySelectedTextMenuItem.setText("Copy"); // NOI18N
        copySelectedTextMenuItem.setName("copySelectedTextMenuItem"); // NOI18N
        copySelectedTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copySelectedTextMenuItemActionPerformed(evt);
            }
        });

        copyAllTextMenuItem.setText("Copy All"); // NOI18N
        copyAllTextMenuItem.setName("copyAllTextMenuItem"); // NOI18N
        copyAllTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyAllTextMenuItemActionPerformed(evt);
            }
        });

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        centerPane.setName("centerPane"); // NOI18N
        centerPane.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204)));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        textPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Code to be executed by Root", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        textPane.setEditable(false);
        textPane.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        textPane.setMargin(new java.awt.Insets(10, 10, 10, 10));
        textPane.setName("textPane"); // NOI18N
        textPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textPaneMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(textPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        centerPane.add(jScrollPane1, gridBagConstraints);

        headerLabel.setFont(new java.awt.Font("Palatino", 1, 16));
        headerLabel.setText("<html>CONGRATULATIONS - BAYESIAN SOFWARE WAS SUCCESSFULLY CONFIGURED!<br> <br>IF YOU ARE<FONT COLOR=RED> UPDATING </FONT>THE BAYESIAN SOFTWARE, THE UPDATE IS COMPLETED AND NO MORE ACTION IS  REQUIRED<br> <br>IF YOU ARE<FONT COLOR=RED> INSTALLING </FONT>THE BAYESIAN SOFTWARE FOR THE FIRST TIME, YOU HAVE TO FINISH INSTALLATION BY CONFIGURING APACHE SERVER.<br><br><FONT COLOR=BLUE> UBUNTU</FONT>USERS - CONFIGURE APACHE SERVER MANUALLY FOLLOWING INSTRUCTIONS ONLINE<br><br>FOR ALL OTHER SUPPORTED OPERATING SYSTEMS, EXCUTE FOLLOWING SET OF COMMANDS AS ROOT<br><FONT COLOR=BLUE>(No instuctions are present, if you opted to skip apache configuration)</FONT></html>"); // NOI18N
        headerLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        headerLabel.setName("headerLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        centerPane.add(headerLabel, gridBagConstraints);

        add(centerPane, java.awt.BorderLayout.CENTER);

        bottomPane.setName("bottomPane"); // NOI18N

        exitButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        exitButton.setText("Close");
        exitButton.setName("exitButton"); // NOI18N
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        copyCodeButton.setFont(new java.awt.Font("Lucida Grande", 1, 14));
        copyCodeButton.setText("Copy");
        copyCodeButton.setName("copyCodeButton"); // NOI18N
        copyCodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyCodeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout bottomPaneLayout = new org.jdesktop.layout.GroupLayout(bottomPane);
        bottomPane.setLayout(bottomPaneLayout);
        bottomPaneLayout.setHorizontalGroup(
            bottomPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, bottomPaneLayout.createSequentialGroup()
                .addContainerGap(769, Short.MAX_VALUE)
                .add(copyCodeButton)
                .add(18, 18, 18)
                .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        bottomPaneLayout.linkSize(new java.awt.Component[] {copyCodeButton, exitButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        bottomPaneLayout.setVerticalGroup(
            bottomPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(bottomPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(exitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(copyCodeButton))
        );

        bottomPaneLayout.linkSize(new java.awt.Component[] {copyCodeButton, exitButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        add(bottomPane, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
           System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed
    private void copyCodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyCodeButtonActionPerformed
        Clipboard clipboard         =   Toolkit.getDefaultToolkit().getSystemClipboard();
        String message              =   getEntireText();

        clipboard.setContents(new StringSelection(message), new TextTransfer());
        

    }//GEN-LAST:event_copyCodeButtonActionPerformed

    private void textPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMousePressed
        if ( evt.isPopupTrigger())
        {
            JPopupMenu popup = getJPopupMenu();
            popup.show(getTextPane() ,  evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_textPaneMousePressed

    private void copySelectedTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copySelectedTextMenuItemActionPerformed
        putSelectedTextIntoClipboard();
    }//GEN-LAST:event_copySelectedTextMenuItemActionPerformed

    private void copyAllTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyAllTextMenuItemActionPerformed
         putEntireTextIntoClipboard();
    }//GEN-LAST:event_copyAllTextMenuItemActionPerformed
    private JPopupMenu getJPopupMenu()  {
        if (popupMenu == null)  {

            popupMenu   = new JPopupMenu();
            popupMenu.add(this.copySelectedTextMenuItem);
            popupMenu.add(this.copyAllTextMenuItem);
        }

         return popupMenu;
    }

   public static void createAndShowGUI() {

        //Create and set up the window.
        javax.swing.JFrame frame = new javax.swing.JFrame(" Bayes Analyze ");
        frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
            }
        });
         InstallationEndPane pane = new InstallationEndPane();

        pane.setPostInstallationInstuctions("snaslnlsan nsalknlsadn nmaldmnsldnasl nalskdnlsadn aslkdnlasdn  ");
        frame.add(pane);



        //Display the window.
        frame.pack();
        frame.setVisible(true);
//        FidViewer.getInstance().updatePlot();
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
     //   getSystemProperties();
       javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JPanel centerPane;
    private javax.swing.JMenuItem copyAllTextMenuItem;
    private javax.swing.JButton copyCodeButton;
    private javax.swing.JMenuItem copySelectedTextMenuItem;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables
    JPopupMenu popupMenu                    =   null;
    public javax.swing.JTextPane getTextPane() {
        return textPane;
    }

}


  final class TextTransfer implements ClipboardOwner {

  public static void main (String...  aArguments ){
    TextTransfer textTransfer = new TextTransfer();

    //display what is currently on the clipboard
    System.out.println("Clipboard contains:" + textTransfer.getClipboardContents() );

    //change the contents and then re-display
    textTransfer.setClipboardContents("blah, blah, blah");
    System.out.println("Clipboard contains:" + textTransfer.getClipboardContents() );
  }

   /**
   * Empty implementation of the ClipboardOwner interface.
   */
   public void lostOwnership( Clipboard aClipboard, Transferable aContents) {
     //do nothing
   }

  /**
  * Place a String on the clipboard, and make this class the
  * owner of the Clipboard's contents.
  */
  public void setClipboardContents( String aString ){
    StringSelection stringSelection = new StringSelection( aString );
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    clipboard.setContents( stringSelection, this );
  }

  /**
  * Get the String residing on the clipboard.
  *
  * @return any text found on the Clipboard; if none found, return an
  * empty String.
  */
  public String getClipboardContents() {
    String result = "";
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    //odd: the Object param of getContents is not currently used
    Transferable contents = clipboard.getContents(null);
    boolean hasTransferableText =
      (contents != null) &&
      contents.isDataFlavorSupported(DataFlavor.stringFlavor)
    ;
    if ( hasTransferableText ) {
      try {
        result = (String)contents.getTransferData(DataFlavor.stringFlavor);
      }
      catch (UnsupportedFlavorException ex){
        //highly unlikely since we are using a standard DataFlavor
        System.out.println(ex);
        ex.printStackTrace();
      }
      catch (IOException ex) {
        System.out.println(ex);
        ex.printStackTrace();
      }
    }
    return result;
  }
}
