/*
 * BayesServerView.java
 */

package bayesserver;

import java.awt.Desktop;
import java.net.URI;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.*;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.plaf.metal.MetalLookAndFeel;
import utilities.DisplayText;
import utilities.Downloader;

/**
 * The application's main frame.
 */
public class BayesServerView extends FrameView implements Constants {

    public BayesServerView(SingleFrameApplication app) {
        super(app);

          try {
            boolean foundnimbus = false;
            
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
               if ("Nimbus".equals(info.getName())) {
                 UIManager.setLookAndFeel(info.getClassName());
                 foundnimbus = true;
                    break;
                }
            }
            
            if ( foundnimbus == false){
                UIManager.setLookAndFeel( new MetalLookAndFeel());
            }
           // UIManager.setLookAndFeel( new MetalLookAndFeel());
            java.awt.Font  tooltipFont    =   new java.awt.Font("Dialog", 0, 14);
            javax.swing.UIManager.put( "ToolTip.font", new javax.swing.plaf.FontUIResource(tooltipFont) );

         }
        catch(Exception exp){
            exp.printStackTrace();
        }



        javax.swing.ToolTipManager.sharedInstance().setDismissDelay(30000);
        initComponents();



        String title        =   String.format (
                            "Bayesian Server Software Installation/Update"
                            ,
                            BayesServerApp.VESRION
                            );
        getFrame().setTitle(title );
       SwingUtilities.updateComponentTreeUI(getFrame());
       getFrame().validate();
       getFrame().pack();

       

    }

   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        buttonPane = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        installButton = new javax.swing.JButton();
        stagePane = startPane;
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        lookAndFeelMenu = new javax.swing.JMenu();
        NimbusLookAndFeelMenuItem = new javax.swing.JMenuItem();
        MetakLookAndFeelMenuItem = new javax.swing.JMenuItem();
        NativeLookAndFeelMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        homepageMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        contactUsMenu = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        mainPanel.setBackground(Constants.BGColor);
        mainPanel.setMinimumSize(new java.awt.Dimension(900, 600));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(900, 800));
        mainPanel.setLayout(new java.awt.BorderLayout());

        buttonPane.setName("buttonPane"); // NOI18N

        cancelButton.setFont(new java.awt.Font("Lucida Grande 13", 1, 13));
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bayesserver.BayesServerApp.class).getContext().getResourceMap(BayesServerView.class);
        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nActivating the QUIT button will cause this Java application<br>\nto close and all data will be lost.\n\n</font></p></html>\n"); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 40));
        cancelButton.addActionListener(formListener);

        installButton.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        installButton.setText(resourceMap.getString("installButton.text")); // NOI18N
        installButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n     Activating the INSTALL button will cause the server installation <br>\n     kit to be downloaded from \"bayes.wustl.edu\".  This installation  <br>\n     kit is unpacked, updated using the data entered on above, and  <br>\n      then installed.   <br>\n      <br>\n     Note that this application will configure the current  directory <br>\n     to run the Bayesian Analysis software.  However, there  are two<br>\n     files that are saved in this directory that must be copied to other<br>\n     locations and root permission is required to copy these files. <br>\n     Instructions on where these files must be copied are provided  at <br>\n     the end of the installation process.  If you do not wish to   install <br>\n     this software, the hit the QUIT button. <br>\n\n</font></p></html>\n"); // NOI18N
        installButton.setName("installButton"); // NOI18N
        installButton.setPreferredSize(new java.awt.Dimension(90, 40));
        installButton.addActionListener(formListener);

        org.jdesktop.layout.GroupLayout buttonPaneLayout = new org.jdesktop.layout.GroupLayout(buttonPane);
        buttonPane.setLayout(buttonPaneLayout);
        buttonPaneLayout.setHorizontalGroup(
            buttonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonPaneLayout.createSequentialGroup()
                .addContainerGap(680, Short.MAX_VALUE)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(installButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        buttonPaneLayout.linkSize(new java.awt.Component[] {cancelButton, installButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        buttonPaneLayout.setVerticalGroup(
            buttonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(installButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        buttonPaneLayout.linkSize(new java.awt.Component[] {cancelButton, installButton}, org.jdesktop.layout.GroupLayout.VERTICAL);

        mainPanel.add(buttonPane, java.awt.BorderLayout.PAGE_END);

        stagePane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        stagePane.setName("stagePane"); // NOI18N
        mainPanel.add(stagePane, java.awt.BorderLayout.CENTER);

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        lookAndFeelMenu.setText(resourceMap.getString("lookAndFeelMenu.text")); // NOI18N
        lookAndFeelMenu.setName("lookAndFeelMenu"); // NOI18N

        NimbusLookAndFeelMenuItem.setText(resourceMap.getString("NimbusLookAndFeelMenuItem.text")); // NOI18N
        NimbusLookAndFeelMenuItem.setName("NimbusLookAndFeelMenuItem"); // NOI18N
        NimbusLookAndFeelMenuItem.addActionListener(formListener);
        lookAndFeelMenu.add(NimbusLookAndFeelMenuItem);

        MetakLookAndFeelMenuItem.setText(resourceMap.getString("MetakLookAndFeelMenuItem.text")); // NOI18N
        MetakLookAndFeelMenuItem.setName("MetakLookAndFeelMenuItem"); // NOI18N
        MetakLookAndFeelMenuItem.addActionListener(formListener);
        lookAndFeelMenu.add(MetakLookAndFeelMenuItem);

        NativeLookAndFeelMenuItem.setText(resourceMap.getString("NativeLookAndFeelMenuItem.text")); // NOI18N
        NativeLookAndFeelMenuItem.setName("NativeLookAndFeelMenuItem"); // NOI18N
        NativeLookAndFeelMenuItem.addActionListener(formListener);
        lookAndFeelMenu.add(NativeLookAndFeelMenuItem);

        fileMenu.add(lookAndFeelMenu);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bayesserver.BayesServerApp.class).getContext().getActionMap(BayesServerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        homepageMenuItem.setText(resourceMap.getString("homepageMenuItem.text")); // NOI18N
        homepageMenuItem.setName("homepageMenuItem"); // NOI18N
        homepageMenuItem.addActionListener(formListener);
        helpMenu.add(homepageMenuItem);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(formListener);
        helpMenu.add(jMenuItem1);

        contactUsMenu.setText(resourceMap.getString("contactUsMenu.text")); // NOI18N
        contactUsMenu.setName("contactUsMenu"); // NOI18N
        contactUsMenu.addActionListener(formListener);
        helpMenu.add(contactUsMenu);

        menuBar.add(helpMenu);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == cancelButton) {
                BayesServerView.this.cancelButtonActionPerformed(evt);
            }
            else if (evt.getSource() == installButton) {
                BayesServerView.this.installButtonActionPerformed(evt);
            }
            else if (evt.getSource() == NimbusLookAndFeelMenuItem) {
                BayesServerView.this.NimbusLookAndFeelMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == MetakLookAndFeelMenuItem) {
                BayesServerView.this.MetakLookAndFeelMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == NativeLookAndFeelMenuItem) {
                BayesServerView.this.NativeLookAndFeelMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == homepageMenuItem) {
                BayesServerView.this.homepageMenuItemActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItem1) {
                BayesServerView.this.jMenuItem1ActionPerformed(evt);
            }
            else if (evt.getSource() == contactUsMenu) {
                BayesServerView.this.contactUsMenuActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.exit(0);
}//GEN-LAST:event_cancelButtonActionPerformed
    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
        System.out.println("Starting installation");
        System.out.println("*****************************************");
        BaseInstaller installer     =   getInstaller() ;
        boolean canInstall      =   installer.isReadyToInstall();
        if (canInstall == false) {return;}
        installInBackground();
    }//GEN-LAST:event_installButtonActionPerformed

    private void homepageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homepageMenuItemActionPerformed
        launchLink("http://bayesiananalysis.wustl.edu");
}//GEN-LAST:event_homepageMenuItemActionPerformed
    private void contactUsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactUsMenuActionPerformed
        sendEmail("gbretthorst@wustl.edu");
}//GEN-LAST:event_contactUsMenuActionPerformed
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        StringBuilder sb           =    new StringBuilder();
        sb.append("http://bayesiananalysis.wustl.edu/install.html");

        launchLink(sb.toString());
}//GEN-LAST:event_jMenuItem1ActionPerformed
    private void NimbusLookAndFeelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NimbusLookAndFeelMenuItemActionPerformed
        try {
             for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
               if ("Nimbus".equals(info.getName())) {
                 UIManager.setLookAndFeel(info.getClassName());
                }
            }

         }
        catch(Exception exp){
            exp.printStackTrace();
        }
        SwingUtilities.updateComponentTreeUI(getFrame());

    }//GEN-LAST:event_NimbusLookAndFeelMenuItemActionPerformed

    private void NativeLookAndFeelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NativeLookAndFeelMenuItemActionPerformed
     try {
	// Set System L&F
        String uiname =  UIManager.getSystemLookAndFeelClassName();
        UIManager.setLookAndFeel(uiname);
         System.out.println(uiname );
        }

      catch (Exception e) {
            e.printStackTrace();
      }
      SwingUtilities.updateComponentTreeUI(getFrame());
    }//GEN-LAST:event_NativeLookAndFeelMenuItemActionPerformed

    private void MetakLookAndFeelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetakLookAndFeelMenuItemActionPerformed
       try {
	// Set System L&F
        String uiname =   UIManager.getCrossPlatformLookAndFeelClassName();
        UIManager.setLookAndFeel( uiname );
        System.out.println(uiname );

        }

      catch (Exception e) {
            e.printStackTrace();
      }
      SwingUtilities.updateComponentTreeUI(getFrame());
    }//GEN-LAST:event_MetakLookAndFeelMenuItemActionPerformed


     private void sendEmail(String email){
        Desktop  desktop            =   null;


        try{
             boolean isDesktop           =   Desktop.isDesktopSupported();
             if ( isDesktop  == false){
                DisplayText.popupErrorMessage("Java Desktop is not supported by your OS. Exit...");

             }
            else{
                  desktop    =   Desktop.getDesktop();

                if (email != null && email.length() > 0) {
                    URI uriMailTo = new URI("mailto", email, null);
                    desktop.mail(uriMailTo);
                } else {
                    desktop.mail();
                }
            }


        }catch (Exception e){e.printStackTrace();}
        finally{}




    }
     private void launchLink(String link){
        Desktop  desktop            =   null;
        URI uri                     =   null;


        try{
             boolean isDesktop           =   Desktop.isDesktopSupported();
             if ( isDesktop  == false){
                DisplayText.popupErrorMessage("Java Desktop is not supported by your OS. Exit...");

            }
            else{

                desktop    =   Desktop.getDesktop();
                uri             =   new URI(link);
                desktop.browse(uri);
            }


        }catch (Exception e){e.printStackTrace();}
        finally{}




    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MetakLookAndFeelMenuItem;
    private javax.swing.JMenuItem NativeLookAndFeelMenuItem;
    private javax.swing.JMenuItem NimbusLookAndFeelMenuItem;
    private javax.swing.JPanel buttonPane;
    private javax.swing.JButton cancelButton;
    private javax.swing.JMenuItem contactUsMenu;
    private javax.swing.JMenuItem homepageMenuItem;
    private javax.swing.JButton installButton;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu lookAndFeelMenu;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel stagePane;
    // End of variables declaration//GEN-END:variables

    InstallerGui startPane                   =       new bayesserver.InstallerGui();
    public ProgressPane progresspane         =       null;

    public javax.swing.JPanel        getMainPanel() {
        return mainPanel;
    }
    public BaseInstaller getInstaller() {
        return startPane.getInstaller();
    }


    public void installInBackground(){
        setProgressPanel();
        Thread installThread =  new Thread( new InstallerThread());
        installThread.start();

    }
    public void setFinalMessagePanel(){
            getMainPanel().removeAll();
            
            String header       =  getInstaller(). getFinaleStageHeader();
            String message      =  getInstaller().getInstallationCompeteMessage();
            

            InstallationEndPane endPane   = new InstallationEndPane();
            endPane.setHeaderMessage(header);
            endPane.setPostInstallationInstuctions(message);
            
            getMainPanel().add(endPane);
            getMainPanel().revalidate();
        

              
    }
    public void setProgressPanel(){
            getMainPanel().removeAll();
            progresspane     =   null;
            progresspane     =   new ProgressPane();

            getMainPanel().add(progresspane);
            getMainPanel().revalidate();



    }
    public void setStartPanel(){
            getMainPanel().removeAll();

            mainPanel.add(stagePane, java.awt.BorderLayout.CENTER);
            mainPanel.add(buttonPane, java.awt.BorderLayout.PAGE_END);

            getMainPanel().revalidate();
            getFrame().repaint();
    }

    
    class InstallerThread implements Runnable{

        public void run(){

            // start installation on a new thread
            Thread installionTread  = new Thread(){
                @Override
                 public void run(){
                    getInstaller().install();}
             };
            System.out.println("Starting Installation non-gui thread");
            installionTread.start();

            while (installionTread.isAlive()  ){
            try {

                    Thread.sleep(50);
                    SwingUtilities.invokeLater(new Update());

            }
            catch (InterruptedException ex) {
                ex.printStackTrace();
            }

            }

            //SwingUtilities.invokeLater(new Update());
        }
     }
    class Update implements Runnable {
        public  Thread  workerThread;
        public void run() {
            if (progresspane == null){
                System.out.println("Progress pane in not set. No gui update is needed.");
                return;}

            switch (getInstaller().installation){
                case COMPLETE :
                             System.out.println(" INSTALLATION IS COMPLETE. ");
                             setFinalMessagePanel();
                             break;

                 case FAILED :
                              System.out.println("Update for failed installation.");
                              setStartPanel();
                              progresspane          = null;
                              String error          =   "Unknown";
                              if (getInstaller().installationErrorMessage != null){
                                error  =getInstaller().installationErrorMessage;
                              }
                              String err = String.format(
                                    "Installation has failed. Following error was encountered:\n"
                                    + "Error : %s"
                                    ,  error );
                               DisplayText.popupErrorMessage(err);
                               break;

                default:
                            progresspane.setMessage("Installation is in progress...");
                            progresspane.setNote(getProgressMessage());
                            progresspane.updateInstallationStatus(getInstaller().installation );
            }

    }
        private String getProgressMessage(){
            if (getInstaller().installation == INSTALLATION.DOWNLOAD){
                int total       =   Downloader.contentLength;
                int cur         =   Downloader.contentWritten;
                double percent  =   1.00*cur/total*100;
                String msg      =   "Donwloading installation kit";
                if (total > 0) {
                    msg      =   String.format(
                         "Downloaded %.1f%s of %d B",percent, "%",total);
                }
                return msg;
            }
            else {
                return getInstaller().installation.getMessage();
            }
       }

  }
}
