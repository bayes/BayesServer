/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InstallerGui.java
 *
 * Created on May 28, 2009, 9:56:24 AM
 */

package bayesserver;

import Compilers.CompilerFilters;
import Compilers.GnuCompiler;
import Compilers.IntelCompiler;
import Compilers.SunCompiler;
import javax.swing.*;
import java.io.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import utilities.DisplayText;
/**
 *
 * @author apple
 */
public class InstallerGui extends javax.swing.JPanel implements Constants {
    private Installer installer                     =  new Installer();


    /** Creates new form InstallerGui */
    public InstallerGui() {
        initComponents();
        updateGUIOnInitialization();

    }
   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        InstallStarPane = new javax.swing.JPanel();
        setupPane = new javax.swing.JPanel();
        hostSetupPane = new javax.swing.JPanel();
        osLabel = new javax.swing.JLabel();
        hardwareLabel = new javax.swing.JLabel();
        hardwareTextFiled = new javax.swing.JTextField();
        userLabel = new javax.swing.JLabel();
        userNameTextFiled = new javax.swing.JTextField();
        instDirLabel = new javax.swing.JLabel();
        instalDirTextFiled = new javax.swing.JTextField();
        serverHostLabel = new javax.swing.JLabel();
        serverHostNameTextFiled = new javax.swing.JTextField();
        serverIPLabel = new javax.swing.JLabel();
        userGroupTextFiled = new javax.swing.JTextField();
        serverIPTextFiled1 = new javax.swing.JTextField();
        groupLabel = new javax.swing.JLabel();
        osTextFiled = new javax.swing.JTextField();
        shellLabel = new javax.swing.JLabel();
        userShellTextField = new javax.swing.JTextField();
        ServerParamsPane = new javax.swing.JPanel();
        portLabel = new javax.swing.JLabel();
        portFormattedTextField = new javax.swing.JFormattedTextField();
        queueLabel = new javax.swing.JLabel();
        queueTextFiled = new javax.swing.JTextField();
        emailTextFiled = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        compilerSetupPane = new javax.swing.JPanel();
        fortCompilerLabel = new javax.swing.JLabel();
        cCompilerLabel = new javax.swing.JLabel();
        fCompilerTextField = new javax.swing.JTextField();
        cCompilerTextField = new javax.swing.JTextField();
        setFCompilerPathButton = new javax.swing.JButton();
        setcCompilerPathButton = new javax.swing.JButton();
        apacheTabPane = new javax.swing.JTabbedPane();
        centosApacheSetupPane = new javax.swing.JPanel();
        serverrootFileLabel = new javax.swing.JLabel();
        serverrootTextField = new javax.swing.JTextField();
        modifyServerRootButton = new javax.swing.JButton();
        modifyDocumentRootButton = new javax.swing.JButton();
        docRootLabel = new javax.swing.JLabel();
        docLocationTextFiled = new javax.swing.JTextField();
        UIManager.put("Label.disabledForeground",new  java.awt.Color(100,100,100));
        serverExecLabel = new javax.swing.JLabel();
        modifyServerExecutableButton = new javax.swing.JButton();
        httpdTextField = new javax.swing.JTextField();
        pidFileLabel = new javax.swing.JLabel();
        modifyPIDFileButton = new javax.swing.JButton();
        pidFileTextField = new javax.swing.JTextField();
        logsDirLabel = new javax.swing.JLabel();
        modifyLogsDirButton = new javax.swing.JButton();
        modifyConfigFileLocationButton = new javax.swing.JButton();
        startStopLabel = new javax.swing.JLabel();
        confFileLabel = new javax.swing.JLabel();
        configFileLocationTextFiled = new javax.swing.JTextField();
        startStopTextFiled = new javax.swing.JTextField();
        logsdirTextField = new javax.swing.JTextField();
        modifyStartStopButton = new javax.swing.JButton();
        debianApacheSetupPane = new javax.swing.JPanel();
        apche2InstanceLabel = new javax.swing.JLabel();
        apache2PathTextField = new javax.swing.JTextField();
        modifyApache2Button = new javax.swing.JButton();
        btmFiller = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        checkBoxPane = new javax.swing.JPanel();
        passwordProtectedCheckBox = new javax.swing.JCheckBox();
        emailSubscribeCheckBox = new javax.swing.JCheckBox();
        skipApacheSetupCheckBox = new javax.swing.JCheckBox();
        bottomFiller = new javax.swing.JPanel();
        HeaderPane = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        setMinimumSize(new java.awt.Dimension(650, 750));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(650, 900));
        setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        InstallStarPane.setName("InstallStarPane"); // NOI18N
        InstallStarPane.setLayout(new java.awt.BorderLayout(5, 0));

        setupPane.setName("setupPane"); // NOI18N
        setupPane.setLayout(new java.awt.GridBagLayout());

        hostSetupPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null), "Host Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 14))); // NOI18N
        hostSetupPane.setName("hostSetupPane"); // NOI18N
        hostSetupPane.setLayout(new java.awt.GridBagLayout());

        osLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        osLabel.setText("Host OS");
        osLabel.setName("osLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(osLabel, gridBagConstraints);

        hardwareLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        hardwareLabel.setText("Hardware");
        hardwareLabel.setName("hardwareLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(hardwareLabel, gridBagConstraints);

        hardwareTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        hardwareTextFiled.setEditable(false);
        hardwareTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        hardwareTextFiled.setText(getInstaller().osarch  );
        hardwareTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nIf your hardware is not x86_64, i686 or sun4<br> \nthis software cannot be installed on this machine. \n\n</font></p></html>"); // NOI18N
        hardwareTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        hardwareTextFiled.setName("hardwareTextFiled"); // NOI18N
        hardwareTextFiled.setNextFocusableComponent(userNameTextFiled);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(hardwareTextFiled, gridBagConstraints);

        userLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        userLabel.setText("User");
        userLabel.setName("userLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(userLabel, gridBagConstraints);

        userNameTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        userNameTextFiled.setEditable(false);
        userNameTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        userNameTextFiled.setText(this.getInstaller().getUserName());
        userNameTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\nThe Bayesian Analysis software is installed in the home directory of the currently <br>\nlogged in user.<br>\n<br>\n\nIf this is not the correct user name, exit this installation procedure immediately.<br>\n\n\n</font></p></html>"); // NOI18N
        userNameTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        userNameTextFiled.setName("userNameTextFiled"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(userNameTextFiled, gridBagConstraints);

        instDirLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        instDirLabel.setText("Home Dir");
        instDirLabel.setName("instDirLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(instDirLabel, gridBagConstraints);

        instalDirTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        instalDirTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        instalDirTextFiled.setText(getInstaller().installDir);
        instalDirTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe installation directory is the home directory of the current user.<br>\nThe Bayesian Analysis software will be installed in this directory and<br>\nit will uses this directory as temporary works space while running jobs.<br>\n<br>\nIf the directory shown, is not the correct working directory, exit this<br>\nsoftware immediately.<br>\n\n</font></p></html>\n\n\n"); // NOI18N
        instalDirTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        instalDirTextFiled.setName("instalDirTextFiled"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(instalDirTextFiled, gridBagConstraints);

        serverHostLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        serverHostLabel.setText("Hostname");
        serverHostLabel.setName("serverHostLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(serverHostLabel, gridBagConstraints);

        serverHostNameTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        serverHostNameTextFiled.setEditable(false);
        serverHostNameTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        serverHostNameTextFiled.setText(getInstaller().getServerIP() );
        serverHostNameTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe IP address shown in this text field should be the IP address of the server <br>\nthat is to run the Bayesian Analysis software. <br>\n<br>\nIf this IP address is not correct, exit this installation software immediately<br>\n\n\n</font></p></html>"); // NOI18N
        serverHostNameTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        serverHostNameTextFiled.setName("serverHostNameTextFiled"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(serverHostNameTextFiled, gridBagConstraints);

        serverIPLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        serverIPLabel.setText("Host IP");
        serverIPLabel.setName("serverIPLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(serverIPLabel, gridBagConstraints);

        userGroupTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        userGroupTextFiled.setEditable(false);
        userGroupTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        userGroupTextFiled.setText(getInstaller().group);
        userGroupTextFiled.setToolTipText("\n<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the group name for the user <br>\nshown in the previous line.\n\n\n</font></p></html>"); // NOI18N
        userGroupTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        userGroupTextFiled.setName("userGroupTextFiled"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(userGroupTextFiled, gridBagConstraints);

        serverIPTextFiled1.setBackground(new java.awt.Color(204, 204, 204));
        serverIPTextFiled1.setEditable(false);
        serverIPTextFiled1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        serverIPTextFiled1.setText(getInstaller().serverHostName);
        serverIPTextFiled1.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe host name shown in this text field should be the name of <br>\nthe server that is to run the Bayesian Analysis software and that<br>\nhost name should be the name of the machine you are currently <br>\nlogged into.<br> \n<br>\n If this is not correct, exit this installation software immediately.<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        serverIPTextFiled1.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        serverIPTextFiled1.setName("serverIPTextFiled1"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(serverIPTextFiled1, gridBagConstraints);

        groupLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        groupLabel.setText("Group");
        groupLabel.setName("groupLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(groupLabel, gridBagConstraints);

        osTextFiled.setBackground(new java.awt.Color(204, 204, 204));
        osTextFiled.setEditable(false);
        osTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        osTextFiled.setText(getInstaller().osrelease);
        osTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the OS currently installed on your system. <br>\nWe currently support \"Cintos 4.7\" or higher and<br>\n\"Solaris 9.0\" or higher.  If the system OS shown is<br>\nnot one of these, you cannot install the Bayesian <br>\nAnalysis software on this system.<br>\n\n\n</font></p></html>"); // NOI18N
        osTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        osTextFiled.setName("osTextFiled"); // NOI18N
        osTextFiled.setNextFocusableComponent(userNameTextFiled);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        hostSetupPane.add(osTextFiled, gridBagConstraints);

        shellLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        shellLabel.setText("Shell");
        shellLabel.setName("shellLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        hostSetupPane.add(shellLabel, gridBagConstraints);

        userShellTextField.setBackground(new java.awt.Color(204, 204, 204));
        userShellTextField.setEditable(false);
        userShellTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        userShellTextField.setText(getInstaller().getShell());
        userShellTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nDefault shell for user performing installation.<br>\nOnly C-type shells (csh and tsch) are allowed.\n\n\n</font></p></html>"); // NOI18N
        userShellTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true)));
        userShellTextField.setName("userShellTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        hostSetupPane.add(userShellTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        setupPane.add(hostSetupPane, gridBagConstraints);

        ServerParamsPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), null, null), "Server Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 14))); // NOI18N
        ServerParamsPane.setName("ServerParamsPane"); // NOI18N
        ServerParamsPane.setLayout(new java.awt.GridBagLayout());

        portLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        portLabel.setText("Port");
        portLabel.setName("portLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ServerParamsPane.add(portLabel, gridBagConstraints);

        portFormattedTextField.setBackground(Color.WHITE);
        portFormattedTextField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        portFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        portFormattedTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nServer's receives messages addressed to a particular port.<br>\n So messages addressed to port1 and port2 go to two different servers.<br>\n<br>\n Normally the  Bayesian Analysis server listens to port 8080<br>\n and I would recommend you not change this.<br>\n<br> \n But if you wish to run two different servers that have<br>\n different user accounts so they can be billed separately,<br>\n then by all means change this port to, for example, 8081<br>\n or any other valid port number.<br>\n<br>\n However, we do no allow you change this port to 80,<br>\n which is the port for a normal web server.\n\n</font></p></html>\n\n\n"); // NOI18N
        portFormattedTextField.setName("portFormattedTextField"); // NOI18N
        portFormattedTextField.setOpaque(true);
        portFormattedTextField.setValue(this.getInstaller().getPort());
        portFormattedTextField.addActionListener(formListener);
        portFormattedTextField.addPropertyChangeListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        ServerParamsPane.add(portFormattedTextField, gridBagConstraints);

        queueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        queueLabel.setText("Queue");
        queueLabel.setName("queueLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        ServerParamsPane.add(queueLabel, gridBagConstraints);

        queueTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        queueTextFiled.setText(getInstaller().getServerQueue());
        queueTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nServer queue. Default value is \"None\".\n\n\n</font></p></html>"); // NOI18N
        queueTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        queueTextFiled.setName("queueTextFiled"); // NOI18N
        queueTextFiled.setOpaque(true);
        queueTextFiled.addActionListener(formListener);
        queueTextFiled.addFocusListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        ServerParamsPane.add(queueTextFiled, gridBagConstraints);

        emailTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        emailTextFiled.setText(getInstaller().email);
        emailTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis email address has two uses, first it is used in configuring the www<br>\nserver administrator and so must be present.  Second, if your check<br>\n\"Subscribe\" widget this email address will be saved on the<br>\nbayes.wustl.edu server and used to send you email notifications of<br>\nsoftware updates and potential problems.  If at any time you wish to be<br>\ntaken off of this lest send an email to larry@bayes.wustl.edu<br>\n<br>\nA valid email address must have following format:<br>\nBegins with word (alphanumeric) characters, folowed by '@' symbol.<br>\n'@' must follow by more word characters. This part must <br>\nalso have a \\\".\\\" to separate domain and subdomain names.<br>\nExamples: Following email addresses will pass validation <br>\nabc@xyz.net; ab.c@tx.gov\n\n\n</font></p></html>"); // NOI18N
        emailTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        emailTextFiled.setName("emailTextFiled"); // NOI18N
        emailTextFiled.setOpaque(true);
        emailTextFiled.addActionListener(formListener);
        emailTextFiled.addFocusListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        ServerParamsPane.add(emailTextFiled, gridBagConstraints);

        emailLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        emailLabel.setText("Email");
        emailLabel.setName("emailLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ServerParamsPane.add(emailLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        setupPane.add(ServerParamsPane, gridBagConstraints);

        compilerSetupPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null), "Compilers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N
        compilerSetupPane.setName("compilerSetupPane"); // NOI18N
        compilerSetupPane.setLayout(new java.awt.GridBagLayout());

        fortCompilerLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        fortCompilerLabel.setText("Fortran"); // NOI18N
        fortCompilerLabel.setName("fortCompilerLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        compilerSetupPane.add(fortCompilerLabel, gridBagConstraints);

        cCompilerLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        cCompilerLabel.setText("C"); // NOI18N
        cCompilerLabel.setName("cCompilerLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        compilerSetupPane.add(cCompilerLabel, gridBagConstraints);

        fCompilerTextField.setBackground(Color.WHITE);
        fCompilerTextField.setEditable(false);
        fCompilerTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        fCompilerTextField.setText(getInstaller().getFortanCompilerAbsolutePath());
        fCompilerTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the fully qualified name of the Fortran compiler on your OS.<br>\nIf you do not have Fortran on your system, leave this field set to \"None\".<br>\nOtherwise use the \"Set\" button to navigate to and select the compiler <br>\nyou wish to use.\n\n</font></p></html>\n\n\n"); // NOI18N
        fCompilerTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), null));
        fCompilerTextField.setName("fCompilerTextField"); // NOI18N
        fCompilerTextField.setOpaque(true);
        fCompilerTextField.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        compilerSetupPane.add(fCompilerTextField, gridBagConstraints);

        cCompilerTextField.setBackground(Color.WHITE);
        cCompilerTextField.setEditable(false);
        cCompilerTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        cCompilerTextField.setText(getInstaller().getCCompilerAbsolutePath());
        cCompilerTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the fully qualified name of the C compiler on your OS.<br>\nIf you do not have C on your system, leave this field set to \"None\".<br>\nOtherwise use the \"Set\" button to navigate to and select the compiler  <br>\nyou wish to use.\n\n</font></p></html>\n\n\n"); // NOI18N
        cCompilerTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), null));
        cCompilerTextField.setName("cCompilerTextField"); // NOI18N
        cCompilerTextField.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 0);
        compilerSetupPane.add(cCompilerTextField, gridBagConstraints);

        setFCompilerPathButton.setText("Set");
        setFCompilerPathButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nUse this button to navigate to and then select <br>\nthe name of the Fortran compilers.\n\n</font></p></html>\n\n"); // NOI18N
        setFCompilerPathButton.setName("setFCompilerPathButton"); // NOI18N
        setFCompilerPathButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        compilerSetupPane.add(setFCompilerPathButton, gridBagConstraints);

        setcCompilerPathButton.setText("Set");
        setcCompilerPathButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nUse this button to navigate to and then select <br>\nthe name of the C compilers.\n\n</font></p></html>\n\n"); // NOI18N
        setcCompilerPathButton.setName("setcCompilerPathButton"); // NOI18N
        setcCompilerPathButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        compilerSetupPane.add(setcCompilerPathButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        setupPane.add(compilerSetupPane, gridBagConstraints);

        apacheTabPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, java.awt.Color.white), "Apache Server", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 14))); // NOI18N
        apacheTabPane.setName("apacheTabPane"); // NOI18N

        centosApacheSetupPane.setName("centosApacheSetupPane"); // NOI18N
        centosApacheSetupPane.setLayout(new java.awt.GridBagLayout());

        serverrootFileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        serverrootFileLabel.setText("Server Root");
        serverrootFileLabel.setName("serverrootFileLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(serverrootFileLabel, gridBagConstraints);

        serverrootTextField.setBackground(Color.WHITE);
        serverrootTextField.setEditable(false);
        serverrootTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        serverrootTextField.setText(getInstaller().getServeroot());
        serverrootTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe top of the directory tree under which the server's <br>\nconfiguration, executable, error, and log files are kept.\n\n\n\n</font></p></html>\n"); // NOI18N
        serverrootTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        serverrootTextField.setName("serverrootTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(serverrootTextField, gridBagConstraints);

        modifyServerRootButton.setText("Set");
        modifyServerRootButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyServerRootButton.setName("modifyServerRootButton"); // NOI18N
        modifyServerRootButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyServerRootButton, gridBagConstraints);

        modifyDocumentRootButton.setText("Set");
        modifyDocumentRootButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyDocumentRootButton.setName("modifyDocumentRootButton"); // NOI18N
        modifyDocumentRootButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyDocumentRootButton, gridBagConstraints);

        docRootLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        docRootLabel.setText("Doc. Root");
        docRootLabel.setName("docRootLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(docRootLabel, gridBagConstraints);

        docLocationTextFiled.setBackground(Color.WHITE);
        docLocationTextFiled.setEditable(false);
        docLocationTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        docLocationTextFiled.setText(getInstaller().getDocumentRootAbsolutePath());
        docLocationTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe Document Root directory is the location where html files are placed<br>\nfor this server.  The directory shown is the default location for your<br>\nsystem OS.<br>\n<br>\nIf this directory does not exist, you must create it as root when this<br>\ninstallation program completes.<br>\n\n</font></p></html>\n\n"); // NOI18N
        docLocationTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        docLocationTextFiled.setName("docLocationTextFiled"); // NOI18N
        docLocationTextFiled.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(docLocationTextFiled, gridBagConstraints);

        serverExecLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        serverExecLabel.setText("HTTPD"); // NOI18N
        serverExecLabel.setToolTipText(""); // NOI18N
        serverExecLabel.setName("serverExecLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(serverExecLabel, gridBagConstraints);

        modifyServerExecutableButton.setText("Set");
        modifyServerExecutableButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyServerExecutableButton.setName("modifyServerExecutableButton"); // NOI18N
        modifyServerExecutableButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyServerExecutableButton, gridBagConstraints);

        httpdTextField.setBackground(Color.WHITE);
        httpdTextField.setEditable(false);
        httpdTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        httpdTextField.setText(getInstaller().getHttpdCommandPath());
        httpdTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the name of the apache server executable that is to run<br>\nthe Bayesian Analysis software.  This fully qualified path name <br>\nis the default for your OS.  If this server does not exists, you must<br>\ninstall it in this location or manually set the location of the apache<br>\nserver in the startup files<br>\n\n</font></p></html>\n\n"); // NOI18N
        httpdTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        httpdTextField.setName("httpdTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(httpdTextField, gridBagConstraints);

        pidFileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        pidFileLabel.setText("PID File"); // NOI18N
        pidFileLabel.setName("pidFileLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(pidFileLabel, gridBagConstraints);

        modifyPIDFileButton.setText("Set");
        modifyPIDFileButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyPIDFileButton.setName("modifyPIDFileButton"); // NOI18N
        modifyPIDFileButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyPIDFileButton, gridBagConstraints);

        pidFileTextField.setBackground(Color.WHITE);
        pidFileTextField.setEditable(false);
        pidFileTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        pidFileTextField.setText(getInstaller().getPidFileAbsolutePath());
        pidFileTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThe PID file (process ID file) contains the process ID number <br>\nand is used by the OS system to start and stop the server. <br> \nThe value in this text field is the default location for PID files <br>\non your OS.<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        pidFileTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        pidFileTextField.setName("pidFileTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(pidFileTextField, gridBagConstraints);

        logsDirLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        logsDirLabel.setText("Log Dir"); // NOI18N
        logsDirLabel.setName("logsDirLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(logsDirLabel, gridBagConstraints);

        modifyLogsDirButton.setText("Set");
        modifyLogsDirButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyLogsDirButton.setName("modifyLogsDirButton"); // NOI18N
        modifyLogsDirButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyLogsDirButton, gridBagConstraints);

        modifyConfigFileLocationButton.setText("Set");
        modifyConfigFileLocationButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\n\nUse this button to select configuration file that will  <br>\nserver as a template to write configuation file for <br>\nBayesian Analysis Server<br>\n\n\n</font></p></html>\n\n"); // NOI18N
        modifyConfigFileLocationButton.setName("modifyConfigFileLocationButton"); // NOI18N
        modifyConfigFileLocationButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyConfigFileLocationButton, gridBagConstraints);

        startStopLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        startStopLabel.setText("Start/Stop File");
        startStopLabel.setName("startStopLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        centosApacheSetupPane.add(startStopLabel, gridBagConstraints);

        confFileLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        confFileLabel.setText("Config File");
        confFileLabel.setName("confFileLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        centosApacheSetupPane.add(confFileLabel, gridBagConstraints);

        configFileLocationTextFiled.setBackground(Color.WHITE);
        configFileLocationTextFiled.setEditable(false);
        configFileLocationTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        configFileLocationTextFiled.setText(getInstaller().getVirginConfFileName());
        configFileLocationTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nPath to the file that will serve as a template to write new apache<br>\nconfiguration file for Bayesian Analysis Server. When this installation<br>\nprogram completes, the newly created apache configuration file,<br>\nlocated in the system directory, must be copied to the location <br>\nthat will be specified.This is the default location for this file for your<br>\nOS.  To copy this file you must have root privileges.<br>\n\n\n</font></p></html>\n"); // NOI18N
        configFileLocationTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), null));
        configFileLocationTextFiled.setName("configFileLocationTextFiled"); // NOI18N
        configFileLocationTextFiled.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(configFileLocationTextFiled, gridBagConstraints);

        startStopTextFiled.setBackground(Color.WHITE);
        startStopTextFiled.setEditable(false);
        startStopTextFiled.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        startStopTextFiled.setText(getInstaller().getVirginStartStopFileName());
        startStopTextFiled.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis file will serve as a template to configure Start/Stop<br>\nscript  to run Bayesian Analysis Software server. <br> \nFor Linux platform, the template file is located at <br>\n/etc/rc5.d directory. For Sun platform this <br>\n file is /usr/apache/bin/apachectl script.<br>\n\n\n\n\n</font></p></html>\n"); // NOI18N
        startStopTextFiled.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), null));
        startStopTextFiled.setName("startStopTextFiled"); // NOI18N
        startStopTextFiled.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(startStopTextFiled, gridBagConstraints);

        logsdirTextField.setBackground(Color.WHITE);
        logsdirTextField.setEditable(false);
        logsdirTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        logsdirTextField.setText(getInstaller().getLogsDir());
        logsdirTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis is the directory where the two log files are written.  These files<br>\nare named \"access\" and \"error\" with the port number appended to make<br>\nthem unique.  The directory shown is the default log file location for<br>\nyour OS.\n\n</font></p></html>\n\n"); // NOI18N
        logsdirTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        logsdirTextField.setName("logsdirTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        centosApacheSetupPane.add(logsdirTextField, gridBagConstraints);

        modifyStartStopButton.setText("Set");
        modifyStartStopButton.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nUse this button to navigate to and then select <br>\nthe template script that will be used to setup<br>\nBayesian Analysis Server.<br>\n\n</font></p></html>\n\n"); // NOI18N
        modifyStartStopButton.setName("modifyStartStopButton"); // NOI18N
        modifyStartStopButton.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        centosApacheSetupPane.add(modifyStartStopButton, gridBagConstraints);

        apacheTabPane.addTab("CentOS/Sun", centosApacheSetupPane);

        debianApacheSetupPane.setName("debianApacheSetupPane"); // NOI18N
        debianApacheSetupPane.setLayout(new java.awt.GridBagLayout());

        apche2InstanceLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        apche2InstanceLabel.setText("Apache2");
        apche2InstanceLabel.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\nPath to apache server.<br>\n</font></p></html>\n"); // NOI18N
        apche2InstanceLabel.setName("apche2InstanceLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        debianApacheSetupPane.add(apche2InstanceLabel, gridBagConstraints);

        apache2PathTextField.setBackground(Color.WHITE);
        apache2PathTextField.setEditable(false);
        apache2PathTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        apache2PathTextField.setText(getInstaller().getApache2().getPath());
        apache2PathTextField.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\nPath to apache server instance that will run the bayesian software.<br>\nLets say you want to install apache instance by name “apache-bayes.”<br>\nFor standard apache installation execute following:<br>\nsudo sh /usr/share/doc/apache2.2-common/examples/setup-instance bayes<br>\nThis will create new \"/etc/apache2-bayes\" apache server instance.<br>\n\n\n\n</font></p></html>\n"); // NOI18N
        apache2PathTextField.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), null));
        apache2PathTextField.setName("apache2PathTextField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        debianApacheSetupPane.add(apache2PathTextField, gridBagConstraints);

        modifyApache2Button.setText("Set");
        modifyApache2Button.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\nSet path to apache server instance.<br>\nFor standard apache installation to create <br>\na new server instance, execute following:<br>\n<br>\nsudo sh /usr/share/doc/apache2.2-common/examples/setup-instance bayes<br>\n<br>\nThis will create new \"/etc/apache2-bayes\" apache server instance.<br>\n\n\n\n</font></p></htm\n"); // NOI18N
        modifyApache2Button.setName("modifyApache2Button"); // NOI18N
        modifyApache2Button.addActionListener(formListener);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 2);
        debianApacheSetupPane.add(modifyApache2Button, gridBagConstraints);

        btmFiller.setName("btmFiller"); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N
        btmFiller.add(jLabel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 50.0;
        debianApacheSetupPane.add(btmFiller, gridBagConstraints);

        apacheTabPane.addTab("Ubuntu/Debian", debianApacheSetupPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        setupPane.add(apacheTabPane, gridBagConstraints);

        checkBoxPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), null, null));
        checkBoxPane.setName("checkBoxPane"); // NOI18N
        checkBoxPane.setLayout(new javax.swing.BoxLayout(checkBoxPane, javax.swing.BoxLayout.Y_AXIS));

        passwordProtectedCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        passwordProtectedCheckBox.setSelected(getInstaller().isPasswordProtected());
        passwordProtectedCheckBox.setText("Use Server Passwords");
        passwordProtectedCheckBox.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nThis check box is used to indicate that a password is required <br> \nwhen a job is sent to this server. <br>\n<br>\nThese passwords are assigned using the \"htpasswd\" command <br>\nand are are located in the \"users\" file in the \"system\" directory. <br>\n<br>\nThese passwords are used only to verify that a particular user has <br>\npermission to send jobs to this server.  <br>\n<br>\nThese passwords should not be the same as the clients login password <br>\nand they are not the same as the password used to log into this server.\n\n</font></p></html>\n\n"); // NOI18N
        passwordProtectedCheckBox.setName("passwordProtectedCheckBox"); // NOI18N
        passwordProtectedCheckBox.addActionListener(formListener);
        checkBoxPane.add(passwordProtectedCheckBox);

        emailSubscribeCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        emailSubscribeCheckBox.setSelected(getInstaller().isEmailSubscribe());
        emailSubscribeCheckBox.setText("Email Update Notifications");
        emailSubscribeCheckBox.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nWhen the \"Subscribe\" button is checked your admin email address is saved <br>\non bayes.wustl.edu and used to send you email notifications of software<br>\nupdates and potential problems with the software.  If at any time you<br>\nwish to be taken off of this list send an email to larry@bayes.wustl.edu<br>\n\n\n\n\n</font></p></html>\n"); // NOI18N
        emailSubscribeCheckBox.setName("emailSubscribeCheckBox"); // NOI18N
        emailSubscribeCheckBox.setOpaque(true);
        emailSubscribeCheckBox.addActionListener(formListener);
        checkBoxPane.add(emailSubscribeCheckBox);

        skipApacheSetupCheckBox.setFont(new java.awt.Font("Lucida Grande", 1, 13));
        skipApacheSetupCheckBox.setSelected(!getInstaller().isSkipApacheSetup());
        skipApacheSetupCheckBox.setText("Setup Apache Server");
        skipApacheSetupCheckBox.setToolTipText("<html> <p style=\"margin: 6px;\"><font size=\"4\">\n\nTurn on automatic apache server configuration. <br>\nIf you are installing software for the first time,  <br>\nleave this checkbox selected.  <br>\nFor software updates, reconfiguring <br>\napache server is not necessary. <br>\nNote: installation routines don't support automatic <br>\napache configuration for Ubuntu distributions.\n\n\n</font></p></html>\n\n"); // NOI18N
        skipApacheSetupCheckBox.setName("skipApacheSetupCheckBox"); // NOI18N
        skipApacheSetupCheckBox.addActionListener(formListener);
        checkBoxPane.add(skipApacheSetupCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        setupPane.add(checkBoxPane, gridBagConstraints);

        bottomFiller.setName("bottomFiller"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 40.0;
        setupPane.add(bottomFiller, gridBagConstraints);

        InstallStarPane.add(setupPane, java.awt.BorderLayout.CENTER);

        HeaderPane.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(177, 185, 176), new java.awt.Color(204, 204, 204), null, null), "Installation Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 14))); // NOI18N
        HeaderPane.setName("HeaderPane"); // NOI18N
        HeaderPane.setLayout(new java.awt.GridBagLayout());

        messageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18));
        messageLabel.setText(getInstaller().getInstallMessage());
        messageLabel.setName("messageLabel"); // NOI18N
        messageLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        HeaderPane.add(messageLabel, gridBagConstraints);

        InstallStarPane.add(HeaderPane, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setViewportView(InstallStarPane);

        add(jScrollPane1);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, java.beans.PropertyChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == portFormattedTextField) {
                InstallerGui.this.portFormattedTextFieldActionPerformed(evt);
            }
            else if (evt.getSource() == queueTextFiled) {
                InstallerGui.this.queueTextFiledActionPerformed(evt);
            }
            else if (evt.getSource() == emailTextFiled) {
                InstallerGui.this.emailTextFiledActionPerformed(evt);
            }
            else if (evt.getSource() == fCompilerTextField) {
                InstallerGui.this.fCompilerTextFieldActionPerformed(evt);
            }
            else if (evt.getSource() == setFCompilerPathButton) {
                InstallerGui.this.setFCompilerPathButtonActionPerformed(evt);
            }
            else if (evt.getSource() == setcCompilerPathButton) {
                InstallerGui.this.setcCompilerPathButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyServerRootButton) {
                InstallerGui.this.modifyServerRootButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyDocumentRootButton) {
                InstallerGui.this.modifyDocumentRootButtonActionPerformed(evt);
            }
            else if (evt.getSource() == docLocationTextFiled) {
                InstallerGui.this.docLocationTextFiledActionPerformed(evt);
            }
            else if (evt.getSource() == modifyServerExecutableButton) {
                InstallerGui.this.modifyServerExecutableButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyPIDFileButton) {
                InstallerGui.this.modifyPIDFileButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyLogsDirButton) {
                InstallerGui.this.modifyLogsDirButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyConfigFileLocationButton) {
                InstallerGui.this.modifyConfigFileLocationButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyStartStopButton) {
                InstallerGui.this.modifyStartStopButtonActionPerformed(evt);
            }
            else if (evt.getSource() == modifyApache2Button) {
                InstallerGui.this.modifyApache2ButtonActionPerformed(evt);
            }
            else if (evt.getSource() == passwordProtectedCheckBox) {
                InstallerGui.this.passwordProtectedCheckBoxActionPerformed(evt);
            }
            else if (evt.getSource() == emailSubscribeCheckBox) {
                InstallerGui.this.emailSubscribeCheckBoxActionPerformed(evt);
            }
            else if (evt.getSource() == skipApacheSetupCheckBox) {
                InstallerGui.this.skipApacheSetupCheckBoxActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == queueTextFiled) {
                InstallerGui.this.queueTextFiledFocusLost(evt);
            }
            else if (evt.getSource() == emailTextFiled) {
                InstallerGui.this.emailTextFiledFocusLost(evt);
            }
        }

        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            if (evt.getSource() == portFormattedTextField) {
                InstallerGui.this.portFormattedTextFieldPropertyChange(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void modifyConfigFileLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyConfigFileLocationButtonActionPerformed
        File startFile       =   getInstaller().getVirginConfFile();
        File startDir        =   null;
        if (startFile != null){
            startDir = startFile.getParentFile();

        }

        JFileChooser fc     =   new JFileChooser(startDir);

        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
           getInstaller().setVirginConfFile(file);
           getConfigFileLocationTextFiled().setText(file.getAbsolutePath());

         } 

    }//GEN-LAST:event_modifyConfigFileLocationButtonActionPerformed
    private void modifyStartStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyStartStopButtonActionPerformed
        File startFile       =   getInstaller().getVirginStartStopFile();
        File startDir        =   null;
        if (startFile != null){
            startDir = startFile.getParentFile();

        }
        else{
            String dir        =  getInstaller().getPlatform().getRunLevelDirecotries();
            startDir          =  new File(dir);
        }

        JFileChooser fc     =   new JFileChooser(startDir);

        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file        =   fc.getSelectedFile ();
          
           getInstaller().setVirginStartStopFile(file);
           getStartStopTextFiled().setText(file.getAbsolutePath());

         }

    }//GEN-LAST:event_modifyStartStopButtonActionPerformed
    private void passwordProtectedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordProtectedCheckBoxActionPerformed
        updateFromGui();
    }//GEN-LAST:event_passwordProtectedCheckBoxActionPerformed
    private void portFormattedTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_portFormattedTextFieldPropertyChange
        if (evt.getPropertyName().equalsIgnoreCase("value")){
            int aport           =  ((Number)getPortFormattedTextField().getValue()).intValue();
            
            // warn about port 80
            if (aport == 80){
                boolean proceed = utilities.DisplayText.popupDialog(
                        "Port number 80 is reserved for \n" +
                        "regular http server requests.\n" +
                        "Are you sure you want to proceed?");
                if (proceed == false){
                 getPortFormattedTextField().setValue(installer.getPort());
                 return;
                }
               
            }

            InstallationInfo ii = getInstaller().getInstallInfo();

          

            if (ii.isLoaded() && ii.getPort()!= aport){
                String prtStr = ""+getInstaller().getPort();
                String err = String.format(
                   "Bayesian Analysis Software server running on port %s is\n" +
                   "already installed on this account. We highly recommend\n" +
                   "you to reinstall software using the port %s. \n", prtStr, prtStr);

             

                utilities.DisplayText.popupWarningMessage(err);

            }
             
            getInstaller().setPortAndUpdateDependencies(aport);

            getPidFileTextField().setText(getInstaller().getPidFileAbsolutePath());
            getDocLocationTextFiled().setText(getInstaller().getDocumentRootAbsolutePath());
        }
}//GEN-LAST:event_portFormattedTextFieldPropertyChange
    private void setcCompilerPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setcCompilerPathButtonActionPerformed

        JFileChooser fc     =   new JFileChooser( getInstaller().getcDir());
        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setFileFilter(new  CompilerFilters.CFileFilter());


        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setCCompiler(fc.getSelectedFile());
        }

    }//GEN-LAST:event_setcCompilerPathButtonActionPerformed
    private void setFCompilerPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFCompilerPathButtonActionPerformed

        JFileChooser fc     =   new JFileChooser(getInstaller().getFortanDir());
        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setFileFilter(new CompilerFilters.FortranFileFilter());

        int returnVal = fc.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            setFortranCompler (fc.getSelectedFile());
           
        }


}//GEN-LAST:event_setFCompilerPathButtonActionPerformed
    private void emailTextFiledFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailTextFiledFocusLost
        updateFromGui();
}//GEN-LAST:event_emailTextFiledFocusLost
    private void emailTextFiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFiledActionPerformed
       updateFromGui();
}//GEN-LAST:event_emailTextFiledActionPerformed
    private void fCompilerTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fCompilerTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fCompilerTextFieldActionPerformed
    private void emailSubscribeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailSubscribeCheckBoxActionPerformed
        updateFromGui();
    }//GEN-LAST:event_emailSubscribeCheckBoxActionPerformed
    private void queueTextFiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueTextFiledActionPerformed
       updateFromGui();
    }//GEN-LAST:event_queueTextFiledActionPerformed
    private void queueTextFiledFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queueTextFiledFocusLost
         updateFromGui();
    }//GEN-LAST:event_queueTextFiledFocusLost

private void modifyServerExecutableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyServerExecutableButtonActionPerformed
       JFileChooser fc     =   new JFileChooser();

        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
          getInstaller().setHttpdCommandPath(file.getAbsolutePath());
          getHttpdTextField().setText(getInstaller().getHttpdCommandPath());

       } 
}//GEN-LAST:event_modifyServerExecutableButtonActionPerformed
private void modifyPIDFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyPIDFileButtonActionPerformed
       JFileChooser fc     =   new JFileChooser();

        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
           getInstaller().setPidFileDirPath(file.getAbsolutePath());
           getInstaller().syncPidFileNameWithPort();
           getPidFileTextField().setText(getInstaller().getPidFileAbsolutePath());

       } 
}//GEN-LAST:event_modifyPIDFileButtonActionPerformed
private void modifyServerRootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyServerRootButtonActionPerformed
      
       JFileChooser fc     =   new JFileChooser();

        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
            getInstaller().setServeroot(file.getAbsolutePath());
            getServerrootTextField().setText( getInstaller().getServeroot());
         }
}//GEN-LAST:event_modifyServerRootButtonActionPerformed
private void modifyDocumentRootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyDocumentRootButtonActionPerformed
          JFileChooser fc     =   new JFileChooser();
        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
           getInstaller().setDocumentRootParentDir(file.getAbsolutePath());
           
           String txt       =   getInstaller().getDocumentRootAbsolutePath();
           getDocLocationTextFiled().setText( txt);
         }
}//GEN-LAST:event_modifyDocumentRootButtonActionPerformed
private void modifyLogsDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyLogsDirButtonActionPerformed
        JFileChooser fc     =   new JFileChooser();

        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
       
           getInstaller().setLogsDir(file.getAbsolutePath());
           getLogsdirTextField().setText( getInstaller().getLogsDir());

       } 
}//GEN-LAST:event_modifyLogsDirButtonActionPerformed
private void portFormattedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFormattedTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_portFormattedTextFieldActionPerformed

    private void docLocationTextFiledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docLocationTextFiledActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_docLocationTextFiledActionPerformed

    private void modifyApache2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyApache2ButtonActionPerformed
       JFileChooser fc     =   new JFileChooser();

        fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);
        int returnVal = fc.showOpenDialog(null);

         if (returnVal == JFileChooser.APPROVE_OPTION) {
           File file     =   fc.getSelectedFile ();
           Apache2 ap2      =   new Apache2(file );
           boolean valid    =   ap2.checkApache2InstanceIntegrity();
           if (valid == false){
               DisplayText.popupErrorMessage(ap2.getInegrityCheckError());
           }
           else{
               getInstaller().setApache2(ap2);
         }
             apache2PathTextField.setText( getInstaller().getApache2().getPath());
         }
    }//GEN-LAST:event_modifyApache2ButtonActionPerformed

    private void skipApacheSetupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipApacheSetupCheckBoxActionPerformed
        syncApacheSetup();
    }//GEN-LAST:event_skipApacheSetupCheckBoxActionPerformed
 
    public void updateFromGui(){
        // update email
        getInstaller().email  =      getEmailTextFiled().getText();


        // update email subscription
        boolean isEmailSubscription =  emailSubscribeCheckBox.isSelected();
        getInstaller().setEmailSubscribe( isEmailSubscription) ;

        //update password authentication
        boolean isPswrd            = passwordProtectedCheckBox.isSelected();
        getInstaller().setPasswordProtected(isPswrd ) ;

        //update queue
        String queue                =   getQueurTextFiled().getText();
        getInstaller().setServerQueue(queue) ;
        
        //
        boolean skipApache = skipApacheSetupCheckBox.isSelected();
        getInstaller().setSkipApacheSetup(skipApache);


    }



    public boolean setFortranCompler(File compilerFile){
         boolean isSet      = false;
         String  comp       =  compilerFile.getName();
         boolean isIntel    =  IntelCompiler.isFCompiler(comp);
         boolean isGnu      =  GnuCompiler.isFCompiler(comp);
         boolean isSun      =  SunCompiler.isFCompiler(comp);

         if         (isIntel)   {isSet = setIntelFortanCompiler(compilerFile) ;  }
         else if    (isGnu)     {isSet = setGnuFortanCompiler(compilerFile)   ;  }
         else if    (isSun )    {isSet = setSunFortranCompiler(compilerFile)   ;  }


            
       return isSet;
    }
    public boolean setCCompiler(File compilerFile){
         boolean isSet      = false;
         String  comp       =  compilerFile.getName();
         boolean isIntel    =  IntelCompiler.isCCompiler(comp);
         boolean isGnu      =  GnuCompiler.isCCompiler(comp);
         boolean isSun      =  SunCompiler.isCCompiler(comp);

         if         (isIntel)   {isSet = setIntelCCompiler(compilerFile) ;  }
         else if    (isGnu)     {isSet = setGnuCCompiler(compilerFile)   ;  }
         else if    (isSun )    {isSet = setSunCCompiler(compilerFile)   ;  }
             
         return isSet;
    }

    public boolean setIntelFortanCompiler(File compilerFile){
            String errorMessage     =   null;
            String compScript       =   null;

            String compname         =   compilerFile.getName();
            File dir                =   compilerFile.getParentFile();
            String dirname          =   (dir == null)? "":dir.getAbsolutePath();


            /* Find compiler setup script */
            File files []           =   dir.listFiles();
            for (File file : files) {
               String curname       =   file.getName();
               if(
                   curname.equalsIgnoreCase(IntelCompiler.FORTAN_SETUP_LINUX32)
                       ||
                   curname.equalsIgnoreCase(IntelCompiler.FORTAN_SETUP_LINUX64)
                       ||
                   curname.equalsIgnoreCase(IntelCompiler.NEW_COMPILER_SETUP_SCRIPT))
                {
                    compScript      =  curname;
                    break;
                }
            }
            if (compScript == null || compScript.isEmpty()){
                errorMessage    =       String.format("Fortan configuration script in not\n" +
                                                      "found in the selected directory for \"%s\".\n" +
                                                      "The configuration script must have one of\n"+
                                                      "the following names\n" +
                                                      "\"%s\" or \n" +
                                                      "\"%s\" or \n" +
                                                      "\"%s\".",
                                                      compname,
                                                      IntelCompiler.FORTAN_SETUP_LINUX32,
                                                      IntelCompiler.FORTAN_SETUP_LINUX64,
                                                      IntelCompiler.NEW_COMPILER_SETUP_SCRIPT);

                utilities.DisplayText.popupMessage(errorMessage);
                getInstaller(). setNoFortanCompiler();
                getFCompilerTextField().setText(getInstaller().getFortanCompilerAbsolutePath());
                return false;

            }


            getInstaller().setFortanDir(dirname);
            getInstaller().setFortanCompilerName( compname);
            getInstaller().setFortanConfigSrcipt( compScript);
            getFCompilerTextField().setText(getInstaller().getFortanCompilerAbsolutePath());


            // check if c compiler has not been yet set
            if (  getInstaller().isCCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : IntelCompiler.C_COMPILERS) {
                    // check if C compiler file is in the same dir
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setIntelCCompiler(cf); break;}
                }
            }



        return true;
    }
    public boolean setIntelCCompiler(File compilerFile){
            String errorMessage     =   null;
            String compScript       =   null;

            String compname         =   compilerFile.getName();
            File dir                =   compilerFile.getParentFile();
            String dirname          =   (dir == null)? "":dir.getAbsolutePath();


            /* Find sompiler setup script */
            File files []           =   dir.listFiles();
            for (File file : files) {
               String curname       =   file.getName();
               if(
                   curname.equalsIgnoreCase(IntelCompiler.C_SETUP_LINUX32)
                       ||
                   curname.equalsIgnoreCase(IntelCompiler.C_SETUP_LINUX64)
                       ||
                   curname.equalsIgnoreCase(IntelCompiler.NEW_COMPILER_SETUP_SCRIPT))
                {
                    compScript      =  curname;
                    break;
                }
            }


            if (compScript == null || compScript.isEmpty()){
                errorMessage    =       String.format("C compiler configuration script in not\n" +
                                                      "found in the selected directory for \"%s\".\n" +
                                                      "The configuration script must have one of\n"+
                                                      "the following names\n" +
                                                      "\"%s\" or \n" +
                                                      "\"%s\" or \n" +
                                                      "\"%s\".",
                                                      compname,
                                                      IntelCompiler.C_SETUP_LINUX32,
                                                      IntelCompiler.C_SETUP_LINUX64,
                                                      IntelCompiler.NEW_COMPILER_SETUP_SCRIPT);


                getInstaller().setNoCCompiler();
                getCCompilerTextField().setText(getInstaller().getCCompilerAbsolutePath());

            }

            getInstaller().setcDir(dirname);
            getInstaller().setcCompilerName( compname);
            getInstaller().setcConfigScript( compScript);
            getCCompilerTextField().setText(getInstaller().getCCompilerAbsolutePath());


            // check if f compiler has not been yet set
            if (  getInstaller().isFortanCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : IntelCompiler.F_COMPILERS) {
                    // check if F compiler file is in the same dir
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setIntelFortanCompiler(cf); break;}
                }
            }


        return true;
    }

    public boolean setGnuFortanCompiler(File compilerFile){
            File dir            =       compilerFile.getParentFile();
            String dirname      =       (dir == null)? "":dir.getAbsolutePath();
            String compname     =       compilerFile.getName();


            getInstaller().setFortanDir(dirname);
            getInstaller().setFortanCompilerName( compname);
            getInstaller().setFortanConfigSrcipt(Installer.NOCOMPILER);
            getFCompilerTextField().setText(getInstaller().getFortanCompilerAbsolutePath());


            // check if c compiler has not been yet set
            if (  getInstaller().isCCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : GnuCompiler.C_COMPILERS) {
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setGnuCCompiler(cf); break;}
                }
            }



        return true;
    }
    public boolean setGnuCCompiler(File compilerFile){
            File dir            =       compilerFile.getParentFile();
            String dirname      =       (dir == null)? "":dir.getAbsolutePath();
            String compname     =       compilerFile.getName();

            getInstaller().setcDir(dirname);
            getInstaller().setcCompilerName( compname);
            getInstaller().setcConfigScript(Installer.NOCOMPILER );
            getCCompilerTextField().setText(getInstaller().getCCompilerAbsolutePath());



            // check if f compiler has not been yet set
            if (  getInstaller().isFortanCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : GnuCompiler.F_COMPILERS) {
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setGnuFortanCompiler(cf); break;}
                }
            }


        return true;
    }

    public boolean setSunFortranCompiler(File compilerFile){
            File dir            =       compilerFile.getParentFile();
            String dirname      =       (dir == null)? "":dir.getAbsolutePath();
            String compname     =       compilerFile.getName();

            getInstaller().setFortanDir(dirname);
            getInstaller().setFortanCompilerName( compname);
            getInstaller().setcConfigScript(Installer.NOCOMPILER );
            getFCompilerTextField().setText(getInstaller().getFortanCompilerAbsolutePath());


            // check if c compiler has not been yet set
            if (  getInstaller().isCCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : SunCompiler.C_COMPILERS) {
                    // check if C compiler file is in the same dir
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setSunCCompiler(cf); break;}
                }
            }



        return true;
    }
    public boolean setSunCCompiler(File compilerFile){
            File dir            =       compilerFile.getParentFile();
            String dirname      =       (dir == null)? "":dir.getAbsolutePath();
            String compname     =       compilerFile.getName();


            getInstaller().setcDir(dirname);
            getInstaller().setcCompilerName( compname);
            getInstaller().setcConfigScript(Installer.NOCOMPILER );
            getCCompilerTextField().setText(getInstaller().getCCompilerAbsolutePath());



            // check if f compiler has not been yet set
            if (  getInstaller().isFortanCompilerSet()== false){
                // if not set, attempt to set...
                for (String curCompiler  : SunCompiler.F_COMPILERS) {
                    // check if F compiler file is in the same dir
                    File cf       =  new File(dir,curCompiler);
                    if (cf.exists()){ setSunFortranCompiler(cf); break;}
                }
            }


        return true;
    }


    private void updateGUIOnInitialization(){
         boolean isUbuntu = getInstaller().isUbuntu();
         if (isUbuntu){
             this.apacheTabPane.setSelectedComponent(this.debianApacheSetupPane);
         }
         else{
              this.apacheTabPane.setSelectedComponent(this.centosApacheSetupPane);
         }
         syncApacheSetup();
    }
 


    public boolean isServerRootValidlySet(){
        String value            =   getServerrootTextField().getText().toString();
        File dir                =   new File (value);
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }
    public boolean isConfigurationFileValidlySet(){
        String value            =   getConfigFileLocationTextFiled().getText().toString();
        File file               =   new File (value);
        File dir                =   file.getParentFile();
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }
    public boolean isStartStopFileValidlySet(){
        String value            =   getStartStopTextFiled().getText().toString();
        File file               =   new File (value);
        File dir                =   file.getParentFile();
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }
    public boolean isDocumentRootValidlySet(){
        String value            =   getDocLocationTextFiled().getText().toString();
        File file               =   new File (value);
        File dir                =   file.getParentFile();
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }
    public boolean isHttpdValidlySet(){
        String value            =   getHttpdTextField().getText().toString();
        File file               =   new File (value);
        boolean isFileExist     =   file.exists();

        return isFileExist;
    }
    public boolean isPidFieValidlySet(){
        String value            =   getPidFileTextField().getText().toString();
        if (value.isEmpty()){return false;}
        File file               =   new File (value);
        File dir                =   file.getParentFile();
        if (dir == null){ return false;}
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }
    public boolean isLogsDirValidlySet(){
        String value            =   getLogsdirTextField().getText().toString();
        File dir                =   new File (value);
        boolean isDir           =   dir.exists()&& dir.isDirectory();


        return  isDir ;
    }


    public boolean isServerRootExist(){
        String value            =   getServerrootTextField().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isConfigurationFileExist(){
        String value            =   getConfigFileLocationTextFiled().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isStartStopFileExist(){
        String value            =   this.getStartStopTextFiled().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isDocumentRootExist(){
        String value            =   getDocLocationTextFiled().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isHttpdExist(){
        String value            =   getHttpdTextField().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isPidFileExist(){
        String value            =   getPidFileTextField().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    public boolean isLogsDirExist(){
        String value            =   getLogsdirTextField().getText().toString();
        File file               =   new File (value);
        boolean exist           =   file.exists();
        return    exist;
    }
    
    public void setApacheSetupEnabled(boolean enable){
        enableAllComponents(apacheTabPane, enable);
         
    }
    public void enableAllComponents( Container continer, boolean enable){
        Component[] com = continer.getComponents(); 
        for (Component component : com) {
            if (component instanceof Container && 
                    ((Container) component).getComponentCount() > 1)
            {
                  enableAllComponents((Container)component, enable); 
            }
            else{
                 component.setEnabled(enable); 
            }
           
        }
         
    }
    private void syncApacheSetup(){
        boolean setupApache = skipApacheSetupCheckBox.isSelected();
         getInstaller().setSkipApacheSetup(!setupApache);
         setApacheSetupEnabled(setupApache );
    }
    public static void createAndShowGUI() {

        //Create and set up the window.
        JFrame frame = new JFrame(" Bayes Analyze ");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
            }
        });
        frame.add(new InstallerGui());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
//        FidViewer.getInstance().updatePlot();
    }
    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
     //   getSystemProperties();
       javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                createAndShowGUI();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HeaderPane;
    private javax.swing.JPanel InstallStarPane;
    private javax.swing.JPanel ServerParamsPane;
    private javax.swing.JTextField apache2PathTextField;
    private javax.swing.JTabbedPane apacheTabPane;
    private javax.swing.JLabel apche2InstanceLabel;
    private javax.swing.JPanel bottomFiller;
    private javax.swing.JPanel btmFiller;
    private javax.swing.JLabel cCompilerLabel;
    private javax.swing.JTextField cCompilerTextField;
    private javax.swing.JPanel centosApacheSetupPane;
    private javax.swing.JPanel checkBoxPane;
    private javax.swing.JPanel compilerSetupPane;
    private javax.swing.JLabel confFileLabel;
    private javax.swing.JTextField configFileLocationTextFiled;
    private javax.swing.JPanel debianApacheSetupPane;
    private javax.swing.JTextField docLocationTextFiled;
    private javax.swing.JLabel docRootLabel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JCheckBox emailSubscribeCheckBox;
    private javax.swing.JTextField emailTextFiled;
    private javax.swing.JTextField fCompilerTextField;
    private javax.swing.JLabel fortCompilerLabel;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JLabel hardwareLabel;
    private javax.swing.JTextField hardwareTextFiled;
    private javax.swing.JPanel hostSetupPane;
    private javax.swing.JTextField httpdTextField;
    private javax.swing.JLabel instDirLabel;
    private javax.swing.JTextField instalDirTextFiled;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel logsDirLabel;
    private javax.swing.JTextField logsdirTextField;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton modifyApache2Button;
    private javax.swing.JButton modifyConfigFileLocationButton;
    private javax.swing.JButton modifyDocumentRootButton;
    private javax.swing.JButton modifyLogsDirButton;
    private javax.swing.JButton modifyPIDFileButton;
    private javax.swing.JButton modifyServerExecutableButton;
    private javax.swing.JButton modifyServerRootButton;
    private javax.swing.JButton modifyStartStopButton;
    private javax.swing.JLabel osLabel;
    private javax.swing.JTextField osTextFiled;
    private javax.swing.JCheckBox passwordProtectedCheckBox;
    private javax.swing.JLabel pidFileLabel;
    private javax.swing.JTextField pidFileTextField;
    private javax.swing.JFormattedTextField portFormattedTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JLabel queueLabel;
    private javax.swing.JTextField queueTextFiled;
    private javax.swing.JLabel serverExecLabel;
    private javax.swing.JLabel serverHostLabel;
    private javax.swing.JTextField serverHostNameTextFiled;
    private javax.swing.JLabel serverIPLabel;
    private javax.swing.JTextField serverIPTextFiled1;
    private javax.swing.JLabel serverrootFileLabel;
    private javax.swing.JTextField serverrootTextField;
    private javax.swing.JButton setFCompilerPathButton;
    private javax.swing.JButton setcCompilerPathButton;
    private javax.swing.JPanel setupPane;
    private javax.swing.JLabel shellLabel;
    private javax.swing.JCheckBox skipApacheSetupCheckBox;
    private javax.swing.JLabel startStopLabel;
    private javax.swing.JTextField startStopTextFiled;
    private javax.swing.JTextField userGroupTextFiled;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField userNameTextFiled;
    private javax.swing.JTextField userShellTextField;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JTextField   getConfigFileLocationTextFiled() {
        return configFileLocationTextFiled;
    }
    public javax.swing.JTextField   getInstalDirTextFiled() {
        return instalDirTextFiled;
    }
    public javax.swing.JTextField   getOsTextFiled() {
        return osTextFiled;
    }
    public javax.swing.JTextField   getServerHostNameTextFiled() {
        return serverHostNameTextFiled;
    }
    public javax.swing.JTextField   getServerIPTextFiled() {
        return getUserGroupTextFiled();
    }
    public javax.swing.JTextField   getUserNameTextFiled() {
        return userNameTextFiled;
    }
    public javax.swing.JTextField   getUserGroupTextFiled() {
        return userGroupTextFiled;
    }
    public javax.swing.JTextField   getUserShellTextFiled() {
        return userShellTextField;
    }
    public javax.swing.JTextField   getEmailTextFiled() {
        return emailTextFiled;
    }
    public javax.swing.JTextField   getDocLocationTextFiled() {
        return docLocationTextFiled;
    }
    public javax.swing.JTextField   getCCompilerTextField() {
        return cCompilerTextField;
    }
    public javax.swing.JTextField   getFCompilerTextField() {
        return fCompilerTextField;
    }
    public javax.swing.JTextField   getHardwareTextFiled() {
        return hardwareTextFiled;
    }
    public javax.swing.JFormattedTextField getPortFormattedTextField() {
        return portFormattedTextField;
    }
    public javax.swing.JTextField   getQueurTextFiled() {
        return queueTextFiled;
    }
    public javax.swing.JTextField   getLogsdirTextField() {
        return logsdirTextField;
    }
    public javax.swing.JLabel       getHardwareLabel() {
        return hardwareLabel;
    }

    public javax.swing.JLabel       getHttpdLabel() {
        return serverExecLabel;
    }
    public javax.swing.JTextField   getHttpdTextField() {
        return httpdTextField;
    }
    public javax.swing.JButton      getModifyHttpdButton() {
        return modifyStartStopButton;
    }
  
    public javax.swing.JLabel       getPidFileLabel() {
        return pidFileLabel;
    }
    public javax.swing.JTextField   getPidFileTextField() {
        return pidFileTextField;
    }

    public javax.swing.JLabel       getServerrootFileLabel() {
        return serverrootFileLabel;
    }
    public javax.swing.JTextField   getServerrootTextField() {
        return serverrootTextField;
    }

    public javax.swing.JTextField   getStartStopTextFiled() {
        return startStopTextFiled;
    }
  

   

    public Installer getInstaller() {
        return installer;
    }
    public void setInstaller(Installer installer) {
        this.installer = installer;
    }


  

   
    

    

   

   
   

    


   

  



}
